#!/usr/bin/perl

use strict;
use warnings;
use v5.10;
use EV;
use Mojolicious::Lite;
use AnyEvent::Open3::Simple;
use JSON qw( from_json to_json );

# PODNAME: wssshd
# ABSTRACT: WebSoket Secure SHell Daemon
# VERSION

websocket '/wsssh.json' => sub {
  my $self = shift;
  my $proc;
  my $ipc = AnyEvent::Open3::Simple->new(
    raw       => 1,
    on_start  => sub {
      $proc = shift;
    },
    on_stdout => sub {
      my($proc, $data) = @_;
      $self->send(to_json({ stdout => $data }));
    },
    on_stderr => sub {
      my($proc, $data) = @_;
      $self->send(to_json({ stderr => $data }));
    },
    on_exit   => sub {
      $self->send(to_json({ exit => $_[1], signal => $_[2] }));
      $self->finish;
    },
    on_error  => sub {
      $self->send(to_json({ error => $_[0] }));
      $self->finish;
    },
  );

  my @buffer;

  $self->on(message => sub {
    my($self, $message) = @_;
    my $payload = eval { from_json($message) };
    if(my $error = $@)
    {
      warn $@;
      return;
    }
    if(ref($payload) eq 'ARRAY')
    {
      say "command: " . join(' ', @$payload);
      $ipc->run(@$payload);
    }
    elsif(ref($payload) eq 'HASH')
    {
      push @buffer, $payload;
      if(defined $proc)
      {
        while(@buffer) 
        {
          my $payload = shift @buffer;
          if(defined $payload->{stdin})
          {
            $proc->print($payload->{stdin});
          }
          if($payload->{close})
          {
            $proc->close;
          }
        }
      }
    }
    else
    {
      warn "don't know how to process frame";
    }
  });
};

app->start;
