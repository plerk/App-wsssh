#!/usr/bin/perl

use strict;
use warnings;
use v5.10;
use URI;
use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::WebSocket::Client;
use JSON qw( from_json to_json );

unless(@ARGV >= 2)
{
  say STDERR "usage: $0 host command";
  exit 2;
}

my $uri = URI->new("ws://localhost:3000/wsssh.json");
$uri->host(shift @ARGV);
say $uri;

my $client = AnyEvent::WebSocket::Client->new;
my $connection = $client->connect($uri)->recv;

$connection->send(to_json(\@ARGV));

$connection->on_each_message(sub {
  my $message = from_json(shift);
  
  if($message->{error})
  {
    die $message->{error};
  }
  
  if(defined $message->{stdout})
  {
    print STDOUT $message->{stdout};
  }

  if(defined $message->{stderr})
  {
    print STDERR $message->{stderr};
  }

  if($message->{signal})
  {
    kill $message->{signal}, $$;
  }
  
  if(defined $message->{exit})
  {
    exit $message->{exit};
  }

});

my $stdin = AnyEvent::Handle->new(
  fh => \*STDIN,
);

$stdin->on_read(sub {
  $stdin->push_read(sub {
    $connection->send(to_json({ stdin => $_[0]{rbuf} }));
    $_[0]{rbuf} = '';
  });
});

$stdin->on_error(sub {
  $connection->send(to_json({ close => 1 }));
});

$stdin->on_eof(sub {
  $connection->send(to_json({ close => 1 }));
});

AnyEvent->condvar->recv;
